# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'funcclass.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import sys
from tkinter import Tk
import os

# 绘制直线
class MyLabel(QLabel): #继承QLabel类
    x0 = 0
    y0 = 0
    x1 = 0
    y1 = 0

    flag = False #记录是否按住鼠标
    sendmsg2 = pyqtSignal(int, int,int,int)
    list = {} #线段的记录
    angle_list = {} #存取角度线段
    i = 0
    j = 0

    line = False
    angle = False
    aflag = False

    # drawable = False

    def __init__(self,linecolor,anglecolor,Parent=None):
        super().__init__(Parent)
        self.setMouseTracking(True)
        self.linecolor = linecolor
        self.anglecolor = anglecolor
        base = Tk()
        # screen's length and width in pixels and mm
        length_1 = base.winfo_screenheight()
        width_1 = base.winfo_screenwidth()
        length_2 = base.winfo_screenmmheight()
        width_2 = base.winfo_screenmmwidth()
        width_ppn = width_1 / width_2
        length_ppn = length_1 / length_2
        ppn = round((width_ppn + length_ppn) / 2, 2)
        self.ratio = ppn

    # 初始化画布
    def initDrawing(self, img, img_width, img_height):
        self.pix = img  # 当前图
        self.img_width = img_width
        self.img_height = img_height
        self.reset()
        # pp = QPainter(self)
        # pp.begin(self)
        # pp.drawPixmap(0, 0, self.pix)
        # pp.end()
        # self.drawable = True

    # 鼠标点击事件
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:  # 按下左键
            if self.line:
                # self.flag = True
                # self.x0 = event.x()
                # self.y0 = event.y()
                # self.i += 1
                if not (self.i in self.list):
                    self.list[self.i] = []
                self.x0, self.y0 = event.x(), event.y()
                self.list[self.i].append((event.x(), event.y()))
                if len(self.list[self.i]) < 2:
                    self.flag = True
                if len(self.list[self.i]) == 2:
                    self.i += 1
                    self.flag = False
                    self.x0, self.y0, self.x1, self.y1 = 0, 0, 0, 0
                self.update()
            if self.angle:
                if not (self.j in self.angle_list):
                    self.angle_list[self.j] = []
                if len(self.angle_list[self.j]) < 3:
                    self.aflag = True
                self.x0, self.y0 = event.x(), event.y()
                self.angle_list[self.j].append((event.x(), event.y()))
                if len(self.angle_list[self.j]) == 3:
                    self.j += 1
                    self.aflag = False
                    self.x0, self.y0, self.x1, self.y1 = 0, 0, 0, 0
                self.update()

        if event.button() == Qt.RightButton: #按下右键
            self.list.clear()                #清除list
            self.angle_list.clear()
            self.x0 = 0
            self.y0 = 0
            self.x1 = 0
            self.y1 = 0
            self.update()

    def backPaint(self): #撤回
        if self.line:
            if self.i > 0:
                self.i -= 1
                self.list.pop(self.i)
                self.update()
            else:
                if self.j > 0:
                    self.j -= 1
                    self.angle_list.pop(self.j)
                    self.update()

        if self.angle:
            if self.j > 0:
                self.j -= 1
                self.angle_list.pop(self.j)
                self.update()
            else:
                if self.i > 0:
                    self.i -= 1
                    self.list.pop(self.i)
                    self.update()

        # 鼠标释放事件
    def mouseReleaseEvent(self, event):    # 释放鼠标 flag为False
        pass

    # 鼠标移动事件
    def mouseMoveEvent(self, event):    # 鼠标移动，如果是处于绘制的状态就可以获取x1，y1的值，update待定
        if self.line:
            if self.flag:
                self.x1 = event.x()
                self.y1 = event.y()
                self.update()               # 更新视图
        if self.angle:
            if self.aflag:
                self.x1 = event.x()
                self.y1 = event.y()
                self.update()               # 更新视图

    # 恢复初始
    def reset(self):
        self.list.clear()  # 清除list
        self.angle_list.clear()
        self.x0 = 0
        self.y0 = 0
        self.x1 = 0
        self.y1 = 0
        self.update()
    # 绘制事件
    def paintEvent(self, event):
        import math
        def get_angle(vec1, vec2):
            dx1 = vec1[2] - vec1[0]
            dy1 = vec1[3] - vec1[1]
            dx2 = vec2[2] - vec2[0]
            dy2 = vec2[3] - vec2[1]
            angle1 = math.atan2(dy1, dx1) * 180 / math.pi  # atan2结果为弧度制(可以处理90度的情况)
            angle2 = math.atan2(dy2, dx2) * 180 / math.pi
            angle = abs(angle1 - angle2)
            if (angle > 180): angle = 360 - angle
            return angle
        super(MyLabel,self).paintEvent(event)  # 开始绘制模式

        painter = QPainter(self)
        painter.begin(self)

        # if self.line:
        #     painter.setPen(QPen(Qt.green, 1.7, Qt.SolidLine))  # 设置笔的属性
        # if self.angle:
        #     painter.setPen(QPen(Qt.deepskyblue, 1.7, Qt.SolidLine))  # 设置笔的属性
        font = QFont()
        font.setPointSize(15) #字体设置
        painter.setFont(font)
        # 画预设图例
        painter.setPen(QPen(Qt.darkBlue, 1.5, Qt.SolidLine))  # 设置笔的属性
        painter.drawLine(1255-40,60,1255-int(40+self.ratio*10),60)  # 绘制预设的1cm图示
        painter.drawText(1255-int(40+self.ratio*10),50,'10mm')

        if (self.aflag == True or self.flag==True) and not((self.x0==0 and self.y0==0) or (self.x1==0 and self.y1==0)):  # aflag为True时
            if self.flag:
                painter.setPen(QPen(self.linecolor, 1.7, Qt.SolidLine))  # 设置笔的属性 Qt.green
            if self.aflag:
                painter.setPen(QPen(self.anglecolor, 1.7, Qt.SolidLine))  # 设置笔的属性 Qt.yellow
            painter.drawLine(self.x0, self.y0, self.x1, self.y1)
        # 画鼠标直线
        for data in self.list.values():
            painter.setPen(QPen(self.linecolor, 1.7, Qt.SolidLine))  # 设置笔的属性Qt.green
            pre = ()
            for point in data:
                painter.drawRect(QRect(QPoint(point[0] - 3, point[1] - 3), QSize(6, 6)))  # 绘制起始点的矩形框
                if pre:
                    painter.drawLine(pre[0], pre[1], point[0], point[1])
                pre = point
            if len(data)==2:
                # 中心坐标处显示长度
                x = (data[0][0] - data[1][0]) / self.ratio
                y = (data[0][1] - data[1][1]) / self.ratio
                length = round((x ** 2 + y ** 2) ** 0.5, 1)
                if abs(data[1][0] - data[0][0])<30 :
                    painter.drawText(int(22+max(data[1][0],data[0][0])),
                                     int(data[0][1] + (data[1][1]-data[0][1])/2-10),
                                     str(length) + 'mm')
                elif abs(data[1][1]-data[0][1])>30:
                    painter.drawText(int(data[0][0] + (data[1][0] - data[0][0]) / 2 +25),
                                     int(data[0][1] + (data[1][1]-data[0][1])/2+10),
                                     str(length) + 'mm')
                else:
                    painter.drawText(int(data[0][0] + (data[1][0] - data[0][0]) / 2 - 10), int(22 + max(data[0][1], data[1][1])),
                                 str(length) + 'mm')

        for data in self.angle_list.values():
            painter.setPen(QPen(self.anglecolor, 1.7, Qt.SolidLine))  # 设置笔的属性 Qt.yellow
            pre = ()
            for point in data:
                painter.drawRect(QRect(QPoint(point[0] - 3, point[1] - 3), QSize(6, 6)))  # 绘制起始点的矩形框
                if pre:
                    painter.drawLine(pre[0], pre[1], point[0], point[1])
                pre = point
            if len(data)==3:
                vec1 = (data[1][0],data[1][1],data[0][0],data[0][1])
                vec2 = (data[1][0],data[1][1],data[2][0],data[2][1])
                angle = get_angle(vec1,vec2)
                painter.drawText(int(data[1][0] + (data[2][0] - data[1][0]) / 2 - 10), int(22 + max(data[1][1], data[2][1])),
                             str(round(angle,2)) + '度')
        painter.end()

    def saveImage(self):
        pqscreen = QGuiApplication.primaryScreen()
        pixmap = pqscreen.grabWindow(self.winId(), 0,0, self.img_width, self.img_height)
        return pixmap




class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1300, 820)
        self.img_width = 1250+10
        self.img_height = 685+10
        self.pic_path = []
        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 20, 1270, 790))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(5, 5, 5, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        # self.widget = QtWidgets.QWidget(self.verticalLayoutWidget)
        # self.widget.setMinimumSize(QtCore.QSize(1106, 633))
        # self.widget.setObjectName("widget")
        # self.lab = MyLabel(self.widget)
        self.linecolor = QColor(Qt.green)
        self.anglecolor = QColor(Qt.yellow)
        self.lab = MyLabel(linecolor = self.linecolor,anglecolor=self.anglecolor)
        self.lab.setFixedSize(self.img_width, self.img_height)
        self.ratio = self.lab.ratio
        # self.verticalLayout.addWidget(self.widget, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout.addWidget(self.lab, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)

        self.groupBox_2 = QtWidgets.QGroupBox(self.verticalLayoutWidget)
        self.groupBox_2.setMinimumSize(QtCore.QSize(1250, 60))
        self.groupBox_2.setMaximumSize(QtCore.QSize(16777215, 100))
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox_2)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 1248, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(30, 0, 30, 0)
        self.horizontalLayout.setSpacing(60)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_9 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout.addWidget(self.pushButton_9)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_6 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.pushButton_6)
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout.addWidget(self.pushButton_7)
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.pushButton_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout.addWidget(self.pushButton_8)

        self.verticalLayout.addWidget(self.groupBox_2, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)


        # self.uiInit()
        self.pushButton.setStyleSheet("QPushButton{background:white;}")
        self.pushButton.clicked.connect(self.getSingleImage)
        self.pushButton_9.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_9.clicked.connect(self.getTwoImage)
        self.pushButton_2.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_2.clicked.connect(self.line)
        self.pushButton_4.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_4.clicked.connect(self.lab.backPaint)
        self.pushButton_3.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_3.clicked.connect(self.angle)
        self.pushButton_5.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_5.clicked.connect(self.reset)
        self.pushButton_6.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_6.clicked.connect(self.linecolorfunc)
        self.pushButton_7.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_7.clicked.connect(self.anglecolorfunc)
        self.pushButton_8.setStyleSheet("QPushButton{background:white;}")
        self.pushButton_8.clicked.connect(self.saveImage)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        Form.setTabOrder(self.pushButton, self.pushButton_2)
        Form.setTabOrder(self.pushButton_9, self.pushButton_2)
        Form.setTabOrder(self.pushButton_2, self.pushButton_3)
        Form.setTabOrder(self.pushButton_3, self.pushButton_4)

    #路径设置
    def initpath(self,filepath):
        self.filepath = filepath

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.groupBox_2.setTitle(_translate("Form", "测量工具"))
        self.pushButton.setText(_translate("Form", "选择图片"))
        self.pushButton_9.setText(_translate("Form", "对比图片"))
        self.pushButton_2.setText(_translate("Form", "长度测量"))
        self.pushButton_6.setText(_translate("Form", "长度颜色"))
        self.pushButton_3.setText(_translate("Form", "角度测量"))
        self.pushButton_7.setText(_translate("Form", "角度颜色"))
        self.pushButton_4.setText(_translate("Form", "撤销"))
        self.pushButton_5.setText(_translate("Form", "恢复"))
        self.pushButton_8.setText(_translate("Form", "保存"))

    def line(self):
        if self.lab.angle == True:
            self.pushButton_3.setStyleSheet("QPushButton{background:white;}")
            self.lab.angle = False
        if self.lab.line == True:
            self.pushButton_2.setStyleSheet("QPushButton{background:white;}")
            self.lab.line = False
        else:
            self.pushButton_2.setStyleSheet("QPushButton{background:%s;}" % self.linecolor.name())
            self.lab.line = True

    def linecolorfunc(self):
        col = QColorDialog.getColor(self.linecolor)
        self.linecolor = col
        self.lab.linecolor = col
        if self.lab.line == True:
            self.pushButton_2.setStyleSheet("QPushButton{background:%s;}" % self.linecolor.name())
        self.lab.update()

    def anglecolorfunc(self):
        col = QColorDialog.getColor(self.anglecolor)
        self.anglecolor = col
        self.lab.anglecolor = col
        if self.lab.angle == True:
            self.pushButton_3.setStyleSheet("QPushButton{background:%s;}" % self.anglecolor.name())
        self.lab.update()

    def angle(self):
        if self.lab.line == True:
            self.pushButton_2.setStyleSheet("QPushButton{background:white;}")
            self.lab.line = False
        if self.lab.angle == True:
            self.pushButton_3.setStyleSheet("QPushButton{background:white;}")
            self.lab.angle = False
        else:
            self.pushButton_3.setStyleSheet("QPushButton{background:%s;}" % self.anglecolor.name())
            self.lab.angle = True
    def reset(self):
        if self.lab.line == True:
            self.pushButton_2.setStyleSheet("QPushButton{background:white;}")
            self.lab.line = False
        if self.lab.angle == True:
            self.pushButton_3.setStyleSheet("QPushButton{background:white;}")
            self.lab.angle = False
        self.lab.reset()

    def getSingleImage(self):
        temp_pic_path = self.pic_path
        self.pic_path = QFileDialog.getOpenFileName(None, "请选择图片路径", os.path.join(self.filepath,'revise_result'))
        self.pic_path = [self.pic_path[0]]
        if len(self.pic_path) != 1:
            self.reply = QMessageBox.information(self, "错误","请选择一张图片文件！")
            self.pic_path = temp_pic_path
            return
        img_width = 331*self.ratio
        img_height = 181*self.ratio
        # 载入图片
        Qimage = QImage()
        Qimage.load(str(self.pic_path[0]))
        # 旋转变换
        transform = QTransform()
        transform.rotate(-90) #逆时针旋转90
        # 应用到image
        Qimage = Qimage.transformed(transform)
        # 创建QPixmap
        pic_image = QPixmap.fromImage(Qimage).scaled(img_width, img_height)
        self.lab.setPixmap(pic_image)
        self.lab.initDrawing(pic_image,img_width, img_height)
        self.lab.setMinimumSize(img_width, img_height)
        self.lab.ratio = self.ratio

    def getTwoImage(self):
        temp_pic_path = self.pic_path
        self.pic_path = QFileDialog.getOpenFileNames(None, "请选择图片路径", os.path.join(self.filepath,'revise_result'))
        self.pic_path = self.pic_path[0]
        img_width = int((99*2)*self.ratio)
        img_height = int(181*self.ratio)
        if len(self.pic_path) != 2:
            self.reply = QMessageBox.information(self, "错误","请选择两张图片文件！")
            self.pic_path = temp_pic_path
            return
        # 载入图片
        Qimage0 = QImage()
        Qimage0.load(str(self.pic_path[0]))
        print(Qimage0.height(),Qimage0.width())
        Qimage1 = QImage()
        Qimage1.load(str(self.pic_path[1]))
        print(Qimage1.height(), Qimage1.width())
        half_width = int(img_width/2)
        # image0 = Qimage0.scaled((img_width / 2), img_height) #TODO
        # image1 = Qimage1.scaled((img_width / 2), img_height)  # TODO
        Qimage = QImage(half_width*2, img_height, QImage.Format_RGB32)
        paint = QPainter(Qimage)
        paint.begin(Qimage) #注意开始和结束
        paint.drawImage(QRect(0,0,half_width,img_height), Qimage0)
        paint.drawImage(QRect(half_width,0,half_width,img_height), Qimage1)
        paint.end()
        # print(Qimage.height(), Qimage.width())
        # paint.drawPixmap(0, 0, QPixmap.fromImage(Qimage0).scaled(img_width/2, img_height))
        # paint.drawPixmap(int(img_width/2), 0, QPixmap.fromImage(Qimage1).scaled(img_width/2, img_height))
        # 创建QPixmap
        pic_image = QPixmap.fromImage(Qimage).scaled(img_width, img_height)
        # print(pic_image.height(), pic_image.width())
        self.lab.setPixmap(pic_image)
        self.lab.initDrawing(pic_image,img_width, img_height)
        self.lab.setMinimumSize(img_width, img_height)
        self.lab.ratio = img_height/331 #修改lab的ratio 高度的像素值和真实值的比值

    def saveImage(self):
        import os
        pix = self.lab.saveImage()
        img = pix.toImage()
        if len(self.pic_path)==0:
            self.reply = QMessageBox.information(self, "错误","尚未标注图像信息")
            return
        pic_name = os.path.basename(self.pic_path[0])[:-4]
        if len(self.pic_path)==2:
            pic_name = os.path.basename(self.pic_path[0])[:-4]+os.path.basename(self.pic_path[1])
            pic_name = 'contrast'+pic_name
        else:
            # 旋转变换
            transform = QTransform()
            transform.rotate(90)
            # 应用到image
            img = img.transformed(transform)
        file_name = os.path.join(self.filepath, 'analyseFile')
        os.makedirs(file_name,exist_ok=True)
        img.save(os.path.join(file_name, pic_name[:-4]+'.png'))
        self.reply = QMessageBox.information(self, "保存标注文件",
                                             "已保存本张足迹标注图像！结果已存入{0}目录下{1}文件下".format(self.filepath,
                                                                                      "analyseFile"))


class newWnd(Ui_Form, QWidget):
    def __init__(self,filepath):
        super(newWnd, self).__init__()
        self.setupUi(self)
        self.initpath(filepath)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = newWnd()
    mainWindow.show()
    sys.exit(app.exec_())