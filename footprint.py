# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'footprint_2windows.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
cwd=os.getcwd()
import sys
sys.path.append(cwd)

import time
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QMessageBox
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
from detectInfo import Detect_img, adjust_img_list
from pathlib import Path
import os
import glob
from shutil import rmtree,Error
# from fpdf import FPDF
import cv2
from funcclass import newWnd
import numpy as np


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setEnabled(True)
        Form.resize(1000, 710)
        Form.setMinimumSize(QtCore.QSize(1000, 710))
        Form.setMaximumSize(QtCore.QSize(1000, 710))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icon.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        Form.setWindowOpacity(1.0)
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(20, 10, 650, 631))
        self.groupBox.setToolTipDuration(-1)
        self.groupBox.setStyleSheet("qss border:2px solid rgb(0, 0, 0);")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_2.setContentsMargins(0, 3, 0, 9)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMinimumSize(QtCore.QSize(301, 540))
        self.label_6.setMaximumSize(QtCore.QSize(301, 540))
        self.label_6.setText("")
        self.label_6.setScaledContents(True)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        self.line_2 = QtWidgets.QFrame(self.groupBox)
        self.line_2.setLineWidth(1)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_2.addWidget(self.line_2)
        self.line_3 = QtWidgets.QFrame(self.groupBox)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_2.addWidget(self.line_3)
        self.label_8 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setMinimumSize(QtCore.QSize(0, 540))
        self.label_8.setMaximumSize(QtCore.QSize(301, 540))
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_2.addWidget(self.label_8)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.line_4 = QtWidgets.QFrame(self.groupBox)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout_2.addWidget(self.line_4)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.line_5 = QtWidgets.QFrame(self.groupBox)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.horizontalLayout.addWidget(self.line_5)
        self.line_6 = QtWidgets.QFrame(self.groupBox)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.horizontalLayout.addWidget(self.line_6)
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout.addWidget(self.label_5)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(690, 10, 281, 111))
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(self.groupBox_2)
        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(10, 19, 261, 81))
        self.horizontalLayoutWidget_6.setObjectName("horizontalLayoutWidget_6")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_6)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_7.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_7.addWidget(self.pushButton_2)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(380, 660, 584, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.progressBar = QtWidgets.QProgressBar(self.horizontalLayoutWidget_3)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_3.addWidget(self.progressBar)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_3)
        self.line = QtWidgets.QFrame(self.horizontalLayoutWidget_3)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_4.addWidget(self.line)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_5.addWidget(self.label_2)
        self.textBrowser = QtWidgets.QTextBrowser(self.horizontalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMinimumSize(QtCore.QSize(166, 30))
        self.textBrowser.setMaximumSize(QtCore.QSize(166, 30))
        self.textBrowser.setLineWrapMode(QtWidgets.QTextEdit.WidgetWidth)
        self.textBrowser.setLineWrapColumnOrWidth(0)
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout_5.addWidget(self.textBrowser)
        self.pushButton_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setMaximumSize(QtCore.QSize(25, 20))
        self.pushButton_8.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.pushButton_8.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_5.addWidget(self.pushButton_8)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_5)
        self.groupBox_3 = QtWidgets.QGroupBox(Form)
        self.groupBox_3.setGeometry(QtCore.QRect(690, 130, 281, 231))
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox_3)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 20, 281, 201))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(50, 30, 50, 30)
        self.verticalLayout.setSpacing(25)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(0, -1, 15, -1)
        self.horizontalLayout_6.setSpacing(6)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_15 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_6.addWidget(self.label_15)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.verticalLayoutWidget)
        self.doubleSpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.doubleSpinBox.setDecimals(2)
        self.doubleSpinBox.setMinimum(0.25)
        self.doubleSpinBox.setMaximum(1.0)
        self.doubleSpinBox.setSingleStep(0.25)
        self.doubleSpinBox.setProperty("value", 1.0)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.horizontalLayout_6.addWidget(self.doubleSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.groupBox_4 = QtWidgets.QGroupBox(Form)
        self.groupBox_4.setGeometry(QtCore.QRect(690, 380, 281, 251))
        self.groupBox_4.setStyleSheet("")
        self.groupBox_4.setFlat(False)
        self.groupBox_4.setCheckable(False)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_4)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(9, 19, 271, 221))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_4.setContentsMargins(10, 20, 10, 10)
        self.verticalLayout_4.setSpacing(15)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.widget_3 = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_3.sizePolicy().hasHeightForWidth())
        self.widget_3.setSizePolicy(sizePolicy)
        self.widget_3.setMinimumSize(QtCore.QSize(251, 35))
        self.widget_3.setMaximumSize(QtCore.QSize(251, 30))
        self.widget_3.setObjectName("widget_3")
        self.layoutWidget = QtWidgets.QWidget(self.widget_3)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 0, 251, 31))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_8.setContentsMargins(20, 0, 20, 0)
        self.horizontalLayout_8.setSpacing(10)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget)
        self.label_9.setMinimumSize(QtCore.QSize(65, 12))
        self.label_9.setMaximumSize(QtCore.QSize(55, 12))
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_8.addWidget(self.label_9, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.doubleSpinBox_2.sizePolicy().hasHeightForWidth())
        self.doubleSpinBox_2.setSizePolicy(sizePolicy)
        self.doubleSpinBox_2.setMinimumSize(QtCore.QSize(120, 20))
        self.doubleSpinBox_2.setAlignment(QtCore.Qt.AlignCenter)
        self.doubleSpinBox_2.setMinimum(0.25)
        self.doubleSpinBox_2.setMaximum(2.0)
        self.doubleSpinBox_2.setSingleStep(0.25)
        self.doubleSpinBox_2.setProperty("value", 1.0)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.horizontalLayout_8.addWidget(self.doubleSpinBox_2, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_4.addWidget(self.widget_3, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.widget = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.widget.setMinimumSize(QtCore.QSize(251, 35))
        self.widget.setMaximumSize(QtCore.QSize(251, 35))
        self.widget.setObjectName("widget")
        self.layoutWidget1 = QtWidgets.QWidget(self.widget)
        self.layoutWidget1.setGeometry(QtCore.QRect(0, 0, 251, 31))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_14.setContentsMargins(20, 0, 20, 0)
        self.horizontalLayout_14.setSpacing(10)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_16 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_14.addWidget(self.label_16, 0, QtCore.Qt.AlignHCenter)
        self.radioButton_3 = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButton_3.setMinimumSize(QtCore.QSize(5, 0))
        self.radioButton_3.setMaximumSize(QtCore.QSize(50, 50))
        self.radioButton_3.setChecked(True)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout_14.addWidget(self.radioButton_3, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.radioButton_4 = QtWidgets.QRadioButton(self.layoutWidget1)
        self.radioButton_4.setMaximumSize(QtCore.QSize(50, 50))
        self.radioButton_4.setObjectName("radioButton_4")
        self.horizontalLayout_14.addWidget(self.radioButton_4, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_4.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.widget_2.setMinimumSize(QtCore.QSize(251, 35))
        self.widget_2.setMaximumSize(QtCore.QSize(251, 35))
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.widget_2)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 251, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_9.setContentsMargins(20, 0, 20, 0)
        self.horizontalLayout_9.setSpacing(10)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_10 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setMinimumSize(QtCore.QSize(48, 29))
        self.label_10.setMaximumSize(QtCore.QSize(48, 12))
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setIndent(-2)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_9.addWidget(self.label_10, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.radioButton_2 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioButton_2.sizePolicy().hasHeightForWidth())
        self.radioButton_2.setSizePolicy(sizePolicy)
        self.radioButton_2.setMinimumSize(QtCore.QSize(47, 0))
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout_9.addWidget(self.radioButton_2, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.radioButton_5 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.radioButton_5.setMinimumSize(QtCore.QSize(47, 0))
        self.radioButton_5.setCheckable(True)
        self.radioButton_5.setChecked(True)
        self.radioButton_5.setObjectName("radioButton_5")
        self.horizontalLayout_9.addWidget(self.radioButton_5, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_4.addWidget(self.widget_2)
        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setMinimumSize(QtCore.QSize(251, 30))
        self.pushButton_6.setMaximumSize(QtCore.QSize(251, 20))
        self.pushButton_6.setFlat(False)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_4.addWidget(self.pushButton_6)

        self.save_dir = "./data/result/"
        self.uiInit()

        self.textBrowser.setText(self.save_dir)
        self.pushButton.clicked.connect(self.pushButtonClicked)
        self.pushButton_3.clicked.connect(self.pushButton3Clicked_anno)
        self.pushButton_2.clicked.connect(self.pushButton2Clicked)
        self.pushButton_8.clicked.connect(self.pushButton8Clicked)
        self.pushButton_6.clicked.connect(self.pushButton6Clicked_docx)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def uiInit(self):
        self.progressBar.setValue(0)
        self.adjust_p = ""
        self.pic_path = ""
        self.anno_p = ""
        self.pic_dir = None
        self.label_6.setText(" ")
        self.label_8.setText(" ")
        self.resultlog = []
        self.demo = newWnd(self.save_dir)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "物证等大还原与矫正测量工具软件"))
        self.groupBox.setTitle(_translate("Form", "展示图"))
        self.label_3.setText(_translate("Form", "原图"))
        self.label_5.setText(_translate("Form", "矫正结果"))
        self.groupBox_2.setTitle(_translate("Form", "自动处理模式"))
        self.pushButton.setText(_translate("Form", "单图像处理"))
        self.pushButton_2.setText(_translate("Form", "批文件处理"))
        self.label.setText(_translate("Form", "处理进度："))
        self.label_2.setText(_translate("Form", "结果存储于："))
        self.pushButton_8.setText(_translate("Form", ".."))
        self.groupBox_3.setTitle(_translate("Form", "图像分析"))
        self.label_15.setText(_translate("Form", "标注打印比例"))
        self.pushButton_5.setText(_translate("Form", "图像测量"))
        self.pushButton_3.setText(_translate("Form", "标注图像打印"))
        self.groupBox_4.setTitle(_translate("Form", "打印配置"))
        self.label_9.setText(_translate("Form", "打印比例"))
        self.label_16.setText(_translate("Form", "打印颜色"))
        self.radioButton_3.setText(_translate("Form", "彩色"))
        self.radioButton_4.setText(_translate("Form", "黑白"))
        self.label_10.setText(_translate("Form", "打印纸张"))
        self.radioButton_2.setText(_translate("Form", "A3"))
        self.radioButton_5.setText(_translate("Form", "A4"))
        self.pushButton_6.setText(_translate("Form", "打印本次(批)校正足迹"))

   # 单文件处理
    def pushButtonClicked(self):
        # self.uiInit()
        self.getSingleImage()
        self.adjustno = 0
        # 在处理之前，删除current的文件夹
        current_revise = self.save_dir + "current_revise/"
        if (os.path.exists(current_revise)):
            try:
                rmtree(current_revise)
            except Error as err:
                print(err)
                self.reply = QMessageBox.information(self, "错误", "current_revise文件夹删除异常！")
        if self.pic_path != "":
            self.progressBar.setValue(80)
            self.singlePicProcess()
            self.progressBar.setValue(90)
            self.singleImgAdjust()
            self.progressBar.setValue(100)
            self.writeResult()
            if self.adjustno == 1:
                self.reply = QMessageBox.information(self, "提示", "图片无法矫正！结果文档已存入{0}目录下。".format(self.save_dir))
            else:
                self.reply = QMessageBox.information(self, "提示", "图片矫正成功！结果文档已存入{0}目录下。".format(self.save_dir))


    # 批文件处理
    def pushButton2Clicked(self):
        # self.uiInit()
        self.pic_dir = QFileDialog.getExistingDirectory(None, "请选择文件夹路径", "../data/source/test/")
        # 在处理之前，删除current的文件夹
        current_revise = self.save_dir + "current_revise/"
        if (os.path.exists(current_revise)):
            try:
                rmtree(current_revise)
            except Error as err:
                print(err)
                self.reply = QMessageBox.information(self, "错误", "current_revise文件夹删除异常！")
        if isChinese(self.pic_dir):
            self.reply = QMessageBox.information(self, "提示", "路径中含有中文字符，请更换路径！")
            self.pic_dir = ""
        else:
            if self.pic_dir != "":
                count = 0
                self.adjustno = 0
                images = glob.glob(self.pic_dir + "/*.[jp][pn]g")
                image_num = len(images)
                for image in images:
                    self.pic_path = image
                    pic_image = QPixmap(self.pic_path)
                    pic_scaled = pic_image.scaled(450, 540, aspectRatioMode=Qt.KeepAspectRatio)
                    self.label_6.setPixmap(pic_scaled)
                    # self.label_7.setText(" ")
                    self.label_8.setText(" ")
                    self.singlePicProcess()
                    self.singleImgAdjust()
                    count += 1
                    self.progressBar.setValue(int((count / image_num) * 100))
                self.writeResult()
                self.reply = QMessageBox.information(self, "批处理完成", "批文件处理完成！共{0}张图片，{1}张图片矫正成功！结果统计文档已存入{2}目录下。"
                                                     .format(image_num, image_num - self.adjustno, self.save_dir))

    # 更换路径
    def pushButton8Clicked(self):
        save_dir = QFileDialog.getExistingDirectory(None, "请选择保存路径", "../data/result/")
        save_dir += "/"
        # print(save_dir)
        self.save_dir = save_dir
        self.textBrowser.setText(self.save_dir)
        self.demo.filepath =  self.save_dir
        # if isChinese(save_dir):
        #     self.reply = QMessageBox.information(self, "提示", "路径中含有中文字符，请更换路径！")
        # else:
        #     if save_dir != "/":
        #         self.save_dir = save_dir
        #         self.textBrowser.setText(self.save_dir)

    #打印本次足迹docx
    def pushButton6Clicked_docx(self):
        # 遍历current_revise文件夹，将所有图片存docx中
        from docx import Document
        from docx import shared

        def imagesTodocx(imagesPath,docxName,w=181,radio=1,format='A4'):
            document = Document()
            section = document.sections[0]
            section.top_margin = shared.Cm(1)
            section.left_margin = shared.Cm(1)
            if format=='A4':
                section.page_height = shared.Cm(29.7)  # 设置A4纸的高度 #27.94 21.59
                section.page_width = shared.Cm(21)  # 设置A4纸的宽
            if format=="A3":
                section.page_height = shared.Cm(42)
                section.page_width = shared.Cm(29.7)

            width = w*radio
            for imagePath in imagesPath:
                document.add_picture(imagePath,width=shared.Mm(width))
            document.save(docxName)

        rgb_mode = True
        format = "A4"
        radio = self.doubleSpinBox_2.value()
        images = glob.glob(self.save_dir + "current_revise" + "/*.[jp][pn]g")
        if self.radioButton_2.isChecked():
            format = "A3"

        if format=="A4" and radio>=1: #创建一个A4文件夹存放截取后的图片 更新images的路径
            for img_path in images:
                p, f = os.path.split(img_path)
                img = cv2.imdecode(np.fromfile(img_path, dtype=np.uint8),1)
                os.makedirs(self.save_dir + "current_revise/A4/", exist_ok=True)
                cv2.imencode('.png',img[0:img.shape[0]-530,:])[1].tofile(
                    self.save_dir + "current_revise/A4/" + f)  # 英文或中文路径均适用
                images = glob.glob(self.save_dir + "current_revise/A4/" +"*.[jp][pn]g")
        if self.radioButton_4.isChecked():
            rgb_mode = False
        if not os.path.exists(self.save_dir+"current_revise"):
            self.reply = QMessageBox.information(self, "提示", "还未生成本次（批）矫正足迹！")
        else:
            if not rgb_mode:
                os.makedirs(self.save_dir+"current_revise_bwtemp/",exist_ok=True)
                for img_path in images:
                    p,f = os.path.split(img_path)
                    # cv2.imwrite(self.save_dir+"current_revise_bwtemp/"+f, cv2.imread(img_path,0))
                    timg = cv2.imdecode(np.fromfile(img_path, dtype=np.uint8),0)
                    cv2.imencode('.png',timg)[1].tofile(self.save_dir+"current_revise_bwtemp/"+f)  # 英文或中文路径均适用
                images = glob.glob(self.save_dir + "current_revise_bwtemp" + "/*.[jp][pn]g")
            docx_path = self.save_dir+"current_revise.docx"
            imagesTodocx(images, docx_path, w=181, radio=radio, format=format)

            if not rgb_mode:
                rmtree(self.save_dir+"current_revise_bwtemp/")
            self.reply = QMessageBox.information(self, "生成docx打印文件",
                                                 "已生成本次矫正足迹打印文件！结果已存入{0}目录下{1}文件中".format(self.save_dir, "current_revise.docx"))

    #打印标注的图像到docx中
    def pushButton3Clicked_anno(self):
        # 遍历current_revise文件夹，将所有图片存docx中
        from docx import Document
        from docx import shared

        def imagesTodocx(imagesPath, docxName, w=181, radio=1):
            document = Document()
            section = document.sections[0]
            section.page_height = shared.Cm(29.7)  # 设置A4纸的高度 #27.94 21.59
            section.page_width = shared.Cm(21)  # 设置A4纸的宽
            section.top_margin = shared.Cm(1)
            section.left_margin = shared.Cm(1)

            width = w * radio
            for imagePath in imagesPath:
                document.add_picture(imagePath, width=shared.Mm(width))
            document.save(docxName)

        radio = self.doubleSpinBox.value()
        images = glob.glob(self.save_dir + "analyseFile" + "/*.[jp][pn]g")

        if radio>=1: #创建一个A4文件夹存放截取后的图片 更新images的路径
            for img_path in images:
                p, f = os.path.split(img_path)
                img = cv2.imdecode(np.fromfile(img_path, dtype=np.uint8),1)
                os.makedirs(self.save_dir + "analyseFile/A4/", exist_ok=True)
                cv2.imencode('.png',img[0:img.shape[0]-200,:])[1].tofile(
                    self.save_dir + "analyseFile/A4/" + f)  # 英文或中文路径均适用
                images = glob.glob(self.save_dir + "analyseFile/A4/" +"*.[jp][pn]g")

        if not os.path.exists(self.save_dir + "analyseFile"):
            self.reply = QMessageBox.information(self, "提示", "还未生成标注足迹信息！")
        else:
            docx_path = self.save_dir + "analyse_img.docx"
            imagesTodocx(images, docx_path, w=181, radio=radio)
            self.reply = QMessageBox.information(self, "生成docx标注文件",
                                                 "已生成本次矫正足迹标注文件！结果已存入{0}目录下{1}文件中".format(self.save_dir,
                                                                                          "analyse_img.docx"))

    # #打印本次足迹pdf
    # def pushButton6Clicked_pdf(self):
    #     # 遍历current_revise文件夹，将所有图片存入pdf中，并且适应打印机对比例进行调整
    #     def imagesTopdf(imagesPath, pdfName,x=0,y=0,w=181,h=331,radio=1,format="A4",pad=2):
    #     #指定对应的图像路径列表生成对应的pdf打印文件（可指定xywh）
    #         pdf = FPDF(format=format)
    #         x, y = x + pad, y + pad
    #         if format=="A4":
    #             enlarge_w = 0.95856
    #             enlarge_h = 0.95863
    #
    #         if format=="A3":
    #             enlarge_w = 0.98674
    #             enlarge_h = 0.99510
    #
    #         for imagePath in imagesPath:
    #             pdf.add_page()
    #             radio_w = radio*w
    #             radio_h = radio*h
    #             pdf.image(imagePath, x=x, y=y, w=radio_w/enlarge_w, h=radio_h/enlarge_h)
    #         pdf.output(pdfName, "F")
    #
    #     rgb_mode = True
    #     format = "A4"
    #     radio = self.doubleSpinBox_2.value()
    #     images = glob.glob(self.save_dir + "current_revise" + "/*.[jp][pn]g")
    #
    #     if self.radioButton_2.isChecked():
    #         format = "A3"
    #         revise_h = 331
    #
    #     if format=="A4": #创建一个A4文件夹存放截取后的图片 更新images的路径
    #         for img_path in images:
    #             p, f = os.path.split(img_path)
    #             img = cv2.imdecode(np.fromfile(img_path, dtype=np.uint8),1)
    #
    #             os.makedirs(self.save_dir + "current_revise/A4/", exist_ok=True)
    #             cv2.imencode('.png',img[0:img.shape[0]-530,:])[1].tofile(
    #                 self.save_dir + "current_revise/A4/" + f)  # 英文或中文路径均适用
    #             images = glob.glob(self.save_dir + "current_revise/A4/" + "*.[jp][pn]g")
    #             revise_h = 278
    #     if self.radioButton_4.isChecked():
    #         rgb_mode = False
    #     if not os.path.exists(self.save_dir+"current_revise"):
    #         self.reply = QMessageBox.information(self, "提示", "还未生成本次（批）矫正足迹！")
    #     else:
    #         if not rgb_mode:
    #             os.makedirs(self.save_dir+"current_revise_bwtemp/",exist_ok=True)
    #             for img_path in images:
    #                 p,f = os.path.split(img_path)
    #                 timg = cv2.imdecode(np.fromfile(img_path, dtype=np.uint8),0)
    #                 cv2.imencode('.png',timg)[1].tofile(self.save_dir+"current_revise_bwtemp/"+f)  # 英文或中文路径均适用
    #             images = glob.glob(self.save_dir + "current_revise_bwtemp" + "/*.[jp][pn]g")
    #         pdf_path = self.save_dir+"current_revise.pdf"
    #         pad = 2
    #         imagesTopdf(images, pdf_path, x=0, y=0, w=181, h=revise_h,radio=radio,format=format,pad=pad)
    #         if not rgb_mode:
    #             rmtree(self.save_dir+"current_revise_bwtemp/")
    #         self.reply = QMessageBox.information(self, "生成pdf打印文件", "已生成本次矫正足迹打印文件！结果已存入{0}目录下{1}文件中".format(self.save_dir,"current_revise.pdf"))


    def singlePicProcess(self):
        os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"  # libiomp5md.dll,有多个时
        pic_dir = self.pic_path
        os.makedirs(self.save_dir + "annotation/", exist_ok=True)
        anno_path = self.save_dir + "annotation/"
        det_img = Detect_img(weights="weights/best.pt")  # ../weights/best.pt
        # self.batch_imgbox, self.batch_small_circle, self.batch_large_circle =  det_img.get_info(source=pic_dir, save_img=True, save_dir=anno_path)
        self.img_path_list, self.all_info = det_img.get_info(source=pic_dir, save_img=True, save_dir=anno_path)
        self.pic_p = Path(pic_dir)
        self.png_name = self.pic_p.name[:-4]+'.png'  # png格式文件名
        self.anno_p = anno_path + self.png_name
        anno_image = QPixmap(self.anno_p)
        anno_scaled = anno_image.scaled(450, 540, aspectRatioMode=Qt.KeepAspectRatio)
        # self.label_7.setPixmap(anno_scaled)

    def singleImgAdjust(self):
        os.makedirs(self.save_dir + "revise_result/", exist_ok=True)
        os.makedirs(self.save_dir + "gold_img/", exist_ok=True)
        # adjust_img_list(self.batch_small_circle, self.batch_large_circle, img_path_list=[self.pic_path], save_dir=self.save_dir, width=1800, height=3300, save_img=True)
        padding = 130
        adjust_img_list([self.pic_path], padding + 1580 + 100, padding + 2980 + 200, True, self.save_dir, padding, *self.all_info) # 1810 3310
        adjust_path = self.save_dir + "revise_result/"
        self.adjust_p = adjust_path + self.png_name
        if os.path.exists(self.adjust_p):
            relog = [self.png_name, True]
            self.resultlog.append(relog)
            adjust_img = QPixmap(self.adjust_p)
            adjust_scaled = adjust_img.scaled(450, 540, aspectRatioMode=Qt.KeepAspectRatio) #IgnoreAspectRatio
            self.label_8.setPixmap(adjust_scaled)
        else:
            self.adjustno += 1
            relog = [self.png_name, False]
            self.resultlog.append(relog)

    def getSingleImage(self):
        self.pic_path = QFileDialog.getOpenFileName(None, "请选择图片路径", "../data/source/test")
        self.pic_path = self.pic_path[0]
        if isChinese(self.pic_path):
            self.reply = QMessageBox.information(self, "提示", "路径中含有中文字符，请更换路径！")
            self.pic_path = ""
        else:
            pic_image = QPixmap(str(self.pic_path))
            pic_scaled = pic_image.scaled(450, 540, aspectRatioMode=Qt.KeepAspectRatio)
            self.label_6.setPixmap(pic_scaled)

    def writeResult(self):
        pic_dir = self.pic_dir if self.pic_dir else self.pic_path
        anno_dir = self.save_dir + "annotation/"
        revise_dir = self.save_dir + "revise_result/"
        resultnum = len(self.resultlog)
        writeStr = ""
        writeStr += "检测图片:{0}\t识别结果:{1}\t矫正结果:{2}\n".format(pic_dir, anno_dir, revise_dir)
        writeStr += "=" * 50
        adjustedStr = "\n矫正成功:共{0}张\n".format(resultnum - self.adjustno) + "-" * 50 + "\n"
        adjustnoStr = "\n矫正失败:共{0}张\n".format(self.adjustno) + "-" * 50 + "\n"
        for relog in self.resultlog:
            if relog[1]:
                adjustedStr += "{0}\n".format(relog[0])
            else:
                adjustnoStr += "{0}\n".format(relog[0])
        writeStr += adjustedStr + "-" * 50 + adjustnoStr
        writeStr += "-" * 50
        writeStr += "\n共{0}张图像，其中{1}张矫正成功！\n".format(resultnum, resultnum - self.adjustno)
        timenum = int(time.time() * 100) % 1000
        timestr = time.strftime("%Y%m%d%H%M", time.localtime())
        timestr += str(timenum)
        logfile = "{0}resultlog{1}.txt".format(self.save_dir, timestr)
        f = open(logfile, "w+")
        f.write(writeStr)
        f.close()

def isChinese(word):
    # for ch in word:
    #     if '\u4e00' <= ch <= '\u9fff':
    #         return True
    return False

class MainWnd(Ui_Form, QWidget):
    def __init__(self):
        super(MainWnd, self).__init__()
        self.setupUi(self)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = MainWnd()

    # filepath = mainWindow.save_dir
    # print("主窗口",mainWindow.save_dir)
    # demo = newWnd(filepath)
    # mainWindow.pushButton_5.clicked.connect(demo.show)

    mainWindow.pushButton_5.clicked.connect(mainWindow.demo.show)

    mainWindow.show()
    sys.exit(app.exec_())